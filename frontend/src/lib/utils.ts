import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatTime(seconds: number): string {
  if (seconds <= 0) return '00:00'
  
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  
  return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`
}

export function formatDate(dateString: string): string {
  const date = new Date(dateString)
  return date.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  })
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è (–¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±—ç–∫–µ–Ω–¥–∞)
const HEALTH_MAX = 100
const HEALTH_HIGH = 80
const HEALTH_MEDIUM = 50
const HEALTH_LOW = 20
const HEALTH_MIN = 0

export function getHealthColor(health: number): string {
  if (health >= HEALTH_HIGH) return 'health-high'
  if (health >= HEALTH_MEDIUM) return 'health-medium'
  if (health >= HEALTH_LOW) return 'health-low'
  return 'health-critical'
}

export function getHealthText(health: number): string {
  if (health >= HEALTH_HIGH) return '–û—Ç–ª–∏—á–Ω–æ–µ'
  if (health >= HEALTH_MEDIUM) return '–•–æ—Ä–æ—à–µ–µ'
  if (health >= HEALTH_LOW) return '–ü–ª–æ—Ö–æ–µ'
  return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ'
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç–∞–¥–∏–π (–¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±—ç–∫–µ–Ω–¥–∞)
const STAGE_TRANSITION_INTERVAL = 600 // 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

export function getStageInfo(stage: string) {
  const stages = {
    egg: {
      name: '–Ø–π—Ü–æ',
      emoji: 'ü•ö',
      description: '–¢—Ä–µ–±—É–µ—Ç —Ç–µ–ø–ª–æ',
      color: 'pet-stage-egg',
      duration: STAGE_TRANSITION_INTERVAL,
    },
    baby: {
      name: '–î–µ—Ç–µ–Ω—ã—à',
      emoji: 'üë∂',
      description: '–¢—Ä–µ–±—É–µ—Ç –µ–¥—É',
      color: 'pet-stage-baby',
      duration: STAGE_TRANSITION_INTERVAL,
    },
    teen: {
      name: '–ü–æ–¥—Ä–æ—Å—Ç–æ–∫',
      emoji: 'üßí',
      description: '–¢—Ä–µ–±—É–µ—Ç –æ—Ç–¥—ã—Ö',
      color: 'pet-stage-teen',
      duration: STAGE_TRANSITION_INTERVAL,
    },
    adult: {
      name: '–í–∑—Ä–æ—Å–ª—ã–π',
      emoji: 'üë®',
      description: '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ',
      color: 'pet-stage-adult',
      duration: 0, // Final stage
    },
    dead: {
      name: '–ú–µ—Ä—Ç–≤—ã–π',
      emoji: 'üíÄ',
      description: '–ü–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä',
      color: 'pet-stage-dead',
      duration: 0,
    },
  }
  
  return stages[stage as keyof typeof stages] || stages.egg
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π (–¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±—ç–∫–µ–Ω–¥–∞)
const ACTION_COSTS = {
  egg: 5,
  baby: 10,
  teen: 15,
  adult: 20,
}

export function getActionCost(stage: string): number {
  return ACTION_COSTS[stage as keyof typeof ACTION_COSTS] || 10
}

export function getActionMessage(stage: string): string {
  const messages = {
    egg: '–°–æ–≥—Ä–µ—Ç—å —è–π—Ü–æ',
    baby: '–ü–æ–∫–æ—Ä–º–∏—Ç—å –¥–µ—Ç–µ–Ω—ã—à–∞',
    teen: '–î–∞—Ç—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–æ–¥—Ä–æ—Å—Ç–∫—É',
    adult: '–ü–æ—Ä–∞–¥–æ–≤–∞—Ç—å –≤–∑—Ä–æ—Å–ª–æ–≥–æ',
  }
  
  return messages[stage as keyof typeof messages] || '–ü–æ–º–æ—á—å –ø–∏—Ç–æ–º—Ü—É'
}

export function getRandomUserId(): string {
  return `user_${Math.random().toString(36).substr(2, 9)}`
}

export function getStoredUserId(): string {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  const storedUserId = localStorage.getItem('user_id')
  if (storedUserId) {
    return storedUserId
  }
  
  // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º TEST_USER_ID –∏–∑ .env
  const testUserId = import.meta.env.VITE_TEST_USER_ID
  if (testUserId) {
    return testUserId
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID
  return getRandomUserId()
}

export function setStoredUserId(userId: string): void {
  localStorage.setItem('user_id', userId)
}

export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout
  
  return (...args: Parameters<T>) => {
    clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
} 