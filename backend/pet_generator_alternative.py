#!/usr/bin/env python3
"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–∏—Ç–æ–º—Ü–µ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–æ DALL-E API
"""

import os
import hashlib
import json
import asyncio
import aiohttp
import aiofiles
from dataclasses import dataclass
from enum import Enum
from typing import List, Optional, Dict, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PetType(Enum):
    CAT = "cat"
    DOG = "dog"
    BIRD = "bird"
    FISH = "fish"
    RABBIT = "rabbit"
    HAMSTER = "hamster"
    DRAGON = "dragon"
    UNICORN = "unicorn"
    ROBOT = "robot"
    ALIEN = "alien"

class PetStyle(Enum):
    CUTE = "cute"
    COOL = "cool"
    MYSTICAL = "mystical"
    ANIME = "anime"
    REALISTIC = "realistic"
    CARTOON = "cartoon"
    PIXEL = "pixel"
    WATERCOLOR = "watercolor"

@dataclass
class PetVisualConfig:
    pet_type: PetType
    style: PetStyle
    stage: str
    health: int
    unique_features: List[str]
    color_scheme: str
    accessories: List[str]
    mood: str
    background: str

class AlternativePetVisualGenerator:
    def __init__(self):
        self.cache_dir = "cache/pet_images"
        os.makedirs(self.cache_dir, exist_ok=True)
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤
        self.pet_emojis = {
            PetType.CAT: "üê±",
            PetType.DOG: "üêï",
            PetType.BIRD: "üê¶",
            PetType.FISH: "üê†",
            PetType.RABBIT: "üê∞",
            PetType.HAMSTER: "üêπ",
            PetType.DRAGON: "üêâ",
            PetType.UNICORN: "ü¶Ñ",
            PetType.ROBOT: "ü§ñ",
            PetType.ALIEN: "üëΩ"
        }
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∑–¥–æ—Ä–æ–≤—å—è
        self.health_colors = {
            "excellent": "#4CAF50",  # –ó–µ–ª–µ–Ω—ã–π
            "good": "#8BC34A",       # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            "average": "#FFC107",    # –ñ–µ–ª—Ç—ã–π
            "poor": "#FF9800",       # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            "critical": "#F44336"    # –ö—Ä–∞—Å–Ω—ã–π
        }
        
        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∑–¥–æ—Ä–æ–≤—å—è
        self.health_moods = {
            "excellent": "happy",
            "good": "content",
            "average": "neutral",
            "poor": "sad",
            "critical": "sick"
        }
        
        # –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
        self.stage_styles = {
            "egg": "small, simple",
            "baby": "tiny, adorable",
            "teen": "medium, growing",
            "adult": "large, mature",
            "dead": "gray, lifeless"
        }

    def _generate_unique_features(self, user_id: str, pet_name: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞"""
        combined = f"{user_id}_{pet_name}"
        hash_value = hashlib.md5(combined.encode()).hexdigest()
        
        features = [
            "–æ—Å–æ–±—ã–µ –æ—Ç–º–µ—Ç–∏–Ω—ã", "–∫—Ä—ã–ª—å—è", "—Ä–æ–≥–∞", "—Ö–≤–æ—Å—Ç", "—É—à–∏",
            "–ø—è—Ç–Ω–∞", "–ø–æ–ª–æ—Å–∫–∏", "–±–ª–µ—Å—Ç—è—â–∞—è —à–µ—Ä—Å—Ç—å", "–¥–ª–∏–Ω–Ω—ã–µ —É—Å—ã",
            "–±–æ–ª—å—à–∏–µ –≥–ª–∞–∑–∞", "–º–∞–ª–µ–Ω—å–∫–∏–π –Ω–æ—Å", "–ø—É—à–∏—Å—Ç—ã–π —Ö–≤–æ—Å—Ç"
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º 2-3 –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞
        selected = []
        for i in range(3):
            index = int(hash_value[i*4:(i+1)*4], 16) % len(features)
            if features[index] not in selected:
                selected.append(features[index])
        
        return selected

    def _determine_pet_type(self, user_id: str) -> PetType:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id"""
        hash_value = hashlib.md5(user_id.encode()).hexdigest()
        index = int(hash_value[:8], 16) % len(PetType)
        return list(PetType)[index]

    def _determine_style(self, user_id: str) -> PetStyle:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id"""
        hash_value = hashlib.md5(user_id.encode()).hexdigest()
        index = int(hash_value[8:16], 16) % len(PetStyle)
        return list(PetStyle)[index]

    def _get_health_mood(self, health: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–¥–æ—Ä–æ–≤—å—è"""
        if health >= 80:
            return self.health_moods["excellent"]
        elif health >= 60:
            return self.health_moods["good"]
        elif health >= 40:
            return self.health_moods["average"]
        elif health >= 20:
            return self.health_moods["poor"]
        else:
            return self.health_moods["critical"]

    def _get_health_colors(self, health: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–¥–æ—Ä–æ–≤—å—è"""
        if health >= 80:
            return "excellent"
        elif health >= 60:
            return "good"
        elif health >= 40:
            return "average"
        elif health >= 20:
            return "poor"
        else:
            return "critical"

    def _generate_svg_image(self, config: PetVisualConfig) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞"""
        emoji = self.pet_emojis[config.pet_type]
        color = self.health_colors[config.color_scheme]
        
        # –†–∞–∑–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏
        sizes = {
            "egg": "60",
            "baby": "80",
            "teen": "100",
            "adult": "120",
            "dead": "80"
        }
        size = sizes.get(config.stage, "100")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π SVG —Å —ç–º–æ–¥–∑–∏
        svg = f'''<?xml version="1.0" encoding="UTF-8"?>
<svg width="{size}" height="{size}" viewBox="0 0 {size} {size}" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="background" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#f0f8ff;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#e6f3ff;stop-opacity:1" />
    </linearGradient>
    <filter id="glow">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge> 
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>
  
  <!-- –§–æ–Ω -->
  <rect width="100%" height="100%" fill="url(#background)" rx="10"/>
  
  <!-- –ü–∏—Ç–æ–º–µ—Ü (—ç–º–æ–¥–∑–∏) -->
  <text x="50%" y="50%" text-anchor="middle" dy="0.35em" 
        font-size="{int(int(size)*0.6)}" font-family="Arial, sans-serif"
        filter="url(#glow)">
    {emoji}
  </text>
  
  <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è -->
  <rect x="10%" y="85%" width="80%" height="8%" rx="4" 
        fill="#ddd" stroke="#999" stroke-width="1"/>
  <rect x="10%" y="85%" width="{config.health}%" height="8%" rx="4" 
        fill="{color}" stroke="#999" stroke-width="1"/>
  
  <!-- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ -->
  {self._generate_features_svg(config.unique_features, size)}
</svg>'''
        
        return svg

    def _generate_features_svg(self, features: List[str], size: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SVG —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–∏—Ç–æ–º—Ü–∞"""
        svg_elements = []
        
        for i, feature in enumerate(features[:3]):  # –ú–∞–∫—Å–∏–º—É–º 3 –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
            x = 20 + (i * 25)
            y = 20 + (i * 5)
            
            if "–∫—Ä—ã–ª—å—è" in feature:
                svg_elements.append(f'''
  <path d="M {x} {y} Q {x+10} {y-10} {x+20} {y}" 
        fill="none" stroke="#87CEEB" stroke-width="2" opacity="0.7"/>
  <path d="M {x+20} {y} Q {x+30} {y-10} {x+40} {y}" 
        fill="none" stroke="#87CEEB" stroke-width="2" opacity="0.7"/>''')
            elif "—Ä–æ–≥–∞" in feature:
                svg_elements.append(f'''
  <path d="M {x+10} {y} L {x+15} {y-15} L {x+20} {y}" 
        fill="none" stroke="#8B4513" stroke-width="3"/>
  <path d="M {x+20} {y} L {x+25} {y-15} L {x+30} {y}" 
        fill="none" stroke="#8B4513" stroke-width="3"/>''')
            elif "—Ö–≤–æ—Å—Ç" in feature:
                svg_elements.append(f'''
  <path d="M {x} {y+20} Q {x-10} {y+10} {x-20} {y+20}" 
        fill="none" stroke="#FF6B6B" stroke-width="3" opacity="0.8"/>''')
        
        return "".join(svg_elements)

    def _get_cache_filename(self, user_id: str, pet_name: str, stage: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫—ç—à–∞"""
        combined = f"{user_id}_{pet_name}_{stage}"
        hash_value = hashlib.md5(combined.encode()).hexdigest()
        return f"{hash_value}.svg"

    async def generate_pet_image(self, user_id: str, pet_name: str, stage: str, health: int) -> tuple[str, Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞"""
        cache_filename = self._get_cache_filename(user_id, pet_name, stage)
        cache_path = os.path.join(self.cache_dir, cache_filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if os.path.exists(cache_path):
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {cache_path}")
            metadata = self._load_metadata(cache_path)
            return cache_path, metadata
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {pet_name}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        pet_type = self._determine_pet_type(user_id)
        style = self._determine_style(user_id)
        unique_features = self._generate_unique_features(user_id, pet_name)
        color_scheme = self._get_health_colors(health)
        mood = self._get_health_mood(health)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = PetVisualConfig(
            pet_type=pet_type,
            style=style,
            stage=stage,
            health=health,
            unique_features=unique_features,
            color_scheme=color_scheme,
            accessories=[],
            mood=mood,
            background="–º—è–≥–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω"
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG
        svg_content = self._generate_svg_image(config)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        async with aiofiles.open(cache_path, 'w', encoding='utf-8') as f:
            await f.write(svg_content)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "config": {
                "pet_type": config.pet_type.value,
                "style": config.style.value,
                "stage": config.stage,
                "health": config.health,
                "unique_features": config.unique_features,
                "color_scheme": config.color_scheme,
                "accessories": config.accessories,
                "mood": config.mood,
                "background": config.background
            },
            "generation_info": {
                "method": "svg_generation",
                "user_id": user_id,
                "pet_name": pet_name,
                "timestamp": asyncio.get_event_loop().time()
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        await self._save_metadata(cache_path, metadata)
        
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {cache_path}")
        return cache_path, metadata

    async def _save_metadata(self, image_path: str, metadata: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        metadata_path = image_path.replace('.svg', '.json')
        async with aiofiles.open(metadata_path, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(metadata, ensure_ascii=False, indent=2))

    def _load_metadata(self, image_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        metadata_path = image_path.replace('.svg', '.json')
        if os.path.exists(metadata_path):
            with open(metadata_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}

    def get_pet_image_url(self, user_id: str, pet_name: str, stage: str, health: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞"""
        # –î–ª—è SVG —Ñ–∞–π–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        cache_filename = self._get_cache_filename(user_id, pet_name, stage)
        return f"/static/pet_images/{cache_filename}"

    async def clear_cache(self, user_id: Optional[str] = None) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if user_id:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for filename in os.listdir(self.cache_dir):
                if filename.startswith(hashlib.md5(user_id.encode()).hexdigest()[:8]):
                    file_path = os.path.join(self.cache_dir, filename)
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—ç—à–∞: {file_path}")
        else:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫—ç—à–∞
            for filename in os.listdir(self.cache_dir):
                file_path = os.path.join(self.cache_dir, filename)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—ç—à–∞: {file_path}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (SVG-—ç–º—É–ª—è—Ü–∏—è)
pet_generator_alternative = AlternativePetVisualGenerator()