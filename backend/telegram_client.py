import aiohttp
import logging
from backend.config.settings import TELEGRAM_BOT_TOKEN, TELEGRAM_API_URL

logger = logging.getLogger(__name__)

class TelegramClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
    """
    
    def __init__(self):
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.api_url = f"{TELEGRAM_API_URL}{self.bot_token}"
        
        if not self.bot_token or self.bot_token == "your_bot_token_here":
            logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
            self.bot_token = None
    
    async def send_message(self, chat_id: str, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.
        
        Args:
            chat_id (str): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not self.bot_token:
            logger.debug("–ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "chat_id": chat_id,
                    "text": message,
                    "parse_mode": "HTML"
                }
                
                async with session.post(
                    f"{self.api_url}/sendMessage",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status} - {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    async def send_low_health_notification(self, chat_id: str, pet_name: str, health: int, stage: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–∏—Ç–æ–º—Ü–∞.
        
        Args:
            chat_id (str): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pet_name (str): –ò–º—è –ø–∏—Ç–æ–º—Ü–∞
            health (int): –¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
            stage (str): –°—Ç–∞–¥–∏—è –ø–∏—Ç–æ–º—Ü–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        message = f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        message += f"–ü–∏—Ç–æ–º–µ—Ü <b>{pet_name}</b> –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–º–æ—â–∏!\n"
        message += f"–°—Ç–∞–¥–∏—è: <b>{stage}</b>\n"
        message += f"–ó–¥–æ—Ä–æ–≤—å–µ: <b>{health}/100</b>\n\n"
        message += "–°—Ä–æ—á–Ω–æ –ø–æ–º–æ–≥–∏—Ç–µ —Å–≤–æ–µ–º—É –ø–∏—Ç–æ–º—Ü—É!"
        
        return await self.send_message(chat_id, message)
    
    async def send_death_notification(self, chat_id: str, pet_name: str, stage: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞.
        
        Args:
            chat_id (str): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pet_name (str): –ò–º—è –ø–∏—Ç–æ–º—Ü–∞
            stage (str): –°—Ç–∞–¥–∏—è –ø–∏—Ç–æ–º—Ü–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        message = f"üíÄ <b>–ü–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä!</b>\n\n"
        message += f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, <b>{pet_name}</b> —É–º–µ—Ä –Ω–∞ —Å—Ç–∞–¥–∏–∏ <b>{stage}</b>.\n\n"
        message += "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!"
        
        return await self.send_message(chat_id, message)
    
    async def send_stage_transition_notification(self, chat_id: str, pet_name: str, old_stage: str, new_stage: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é.
        
        Args:
            chat_id (str): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pet_name (str): –ò–º—è –ø–∏—Ç–æ–º—Ü–∞
            old_stage (str): –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–¥–∏—è
            new_stage (str): –ù–æ–≤–∞—è —Å—Ç–∞–¥–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        message = f"üéâ <b>–ü–∏—Ç–æ–º–µ—Ü –≤—ã—Ä–æ—Å!</b>\n\n"
        message += f"<b>{pet_name}</b> –ø–µ—Ä–µ—à–µ–ª —Å <b>{old_stage}</b> –Ω–∞ <b>{new_stage}</b>!\n\n"
        message += "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–≤–æ–µ–º –ø–∏—Ç–æ–º—Ü–µ!"
        
        return await self.send_message(chat_id, message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
telegram_client = TelegramClient() 