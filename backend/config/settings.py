import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# Telegram Bot settings
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_API_URL = "https://api.telegram.org/bot"

# OpenAI settings (legacy, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
HEALTH_MAX = 100
HEALTH_LOW = 20
HEALTH_MIN = 0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ (—Å–º–µ—Ä—Ç—å)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
HEALTH_DOWN_INTERVALS = {
    'egg': 10,      # 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —è–π—Ü–∞ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
    'baby': 20,    # 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ—Ç–µ–Ω—ã—à–∞ (—Å—ã—Ç–æ—Å—Ç—å)
    'adult': 30    # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–∑—Ä–æ—Å–ª–æ–≥–æ (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)
}

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
HEALTH_DOWN_AMOUNTS = {
    'egg': 3,       # –ë—ã—Å—Ç—Ä–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    'baby': 5,      # –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Å—ã—Ç–æ—Å—Ç–∏
    'adult': 2      # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
}

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏–≥—Ä–æ–∫–∞
HEALTH_UP_AMOUNTS = {
    'egg': 15,      # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    'baby': 25,     # –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—ã—Ç–æ—Å—Ç–∏
    'adult': 15     # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç–∞–¥–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
STAGE_TRANSITION_INTERVAL = 30  # –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞–¥–∏–π

# –ü–æ—Ä—è–¥–æ–∫ —Å—Ç–∞–¥–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è
STAGE_ORDER = ['egg', 'baby', 'adult']

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
STAGE_MESSAGES = {
    'egg': {
        'health_up': '–Ø–π—Ü–æ —Å–æ–≥—Ä–µ—Ç–æ',
        'health_down': '–Ø–π—Ü–æ –æ—Å—Ç—ã–≤–∞–µ—Ç',
        'transition': '–Ø–π—Ü–æ —Ç—Ä–µ—Å–Ω—É–ª–æ! –ü–æ—è–≤–∏–ª—Å—è –¥–µ—Ç–µ–Ω—ã—à!',
        'death': '–Ø–π—Ü–æ –∑–∞–º–µ—Ä–∑–ª–æ...'
    },
    'baby': {
        'health_up': '–î–µ—Ç–µ–Ω—ã—à –Ω–∞–∫–æ—Ä–º–ª–µ–Ω',
        'health_down': '–î–µ—Ç–µ–Ω—ã—à –≥–æ–ª–æ–¥–µ–Ω',
        'transition': '–î–µ—Ç–µ–Ω—ã—à –≤—ã—Ä–æ—Å! –¢–µ–ø–µ—Ä—å –æ–Ω –≤–∑—Ä–æ—Å–ª—ã–π!',
        'death': '–î–µ—Ç–µ–Ω—ã—à —É–º–µ—Ä –æ—Ç –≥–æ–ª–æ–¥–∞...'
    },
    'adult': {
        'health_up': '–í–∑—Ä–æ—Å–ª—ã–π –ø–∏—Ç–æ–º–µ—Ü —Å—á–∞—Å—Ç–ª–∏–≤',
        'health_down': '–í–∑—Ä–æ—Å–ª—ã–π –ø–∏—Ç–æ–º–µ—Ü –≥—Ä—É—Å—Ç–∏—Ç',
        'transition': '–ü–∏—Ç–æ–º–µ—Ü –¥–æ—Å—Ç–∏–≥ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞!',
        'death': '–í–∑—Ä–æ—Å–ª—ã–π –ø–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä –æ—Ç —Ç–æ—Å–∫–∏...'
    }
}

# –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞–¥–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
TELEGRAM_MESSAGES = {
    'low_health': '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ó–¥–æ—Ä–æ–≤—å–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–∏–∑–∫–æ–µ!',
    'death': 'üíÄ –ü–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.',
    'stage_transition': 'üéâ –ü–∏—Ç–æ–º–µ—Ü –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é!'
}

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –≠–ö–û–ù–û–ú–ò–ö–ò =====

# –ù–∞—á–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
INITIAL_COINS = 100

# –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–æ–Ω–µ—Ç–∞—Ö
ACTION_COSTS = {
    'health_up': {
        'egg': 5,      # –°–æ–≥—Ä–µ–≤–∞–Ω–∏–µ —è–π—Ü–∞
        'baby': 10,    # –ö–æ—Ä–º–ª–µ–Ω–∏–µ –¥–µ—Ç–µ–Ω—ã—à–∞
        'adult': 20    # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∑—Ä–æ—Å–ª–æ–≥–æ
    },
    'resurrect': 200,     # –í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
    'special_food': 25,    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –µ–¥–∞
    'medicine': 30,        # –õ–µ–∫–∞—Ä—Å—Ç–≤–æ
    'toy': 15,            # –ò–≥—Ä—É—à–∫–∞
    'grooming': 20,        # –£—Ö–æ–¥ –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º
    'paid_pet': 300,       # –ü–ª–∞—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
}


# –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ACHIEVEMENT_REWARDS = {
    'first_pet': 50,          # –ü–µ—Ä–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü
    'pet_survived_1_hour': 25,    # –ü–∏—Ç–æ–º–µ—Ü –ø—Ä–æ–∂–∏–ª 1 —á–∞—Å
    'pet_survived_1_day': 100,    # –ü–∏—Ç–æ–º–µ—Ü –ø—Ä–æ–∂–∏–ª 1 –¥–µ–Ω—å
    'pet_reached_adult': 200,      # –ü–∏—Ç–æ–º–µ—Ü –¥–æ—Å—Ç–∏–≥ –≤–∑—Ä–æ—Å–ª–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    'perfect_health': 50,          # –ò–¥–µ–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    'daily_login': 10,             # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥
    'weekly_streak': 100,          # –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è
    'monthly_streak': 500          # –ú–µ—Å—è—á–Ω–∞—è —Å–µ—Ä–∏—è
}

# –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è
ACTION_REWARDS = {
    'daily_login': 5,         # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥
    'pet_care': 2,           # –£—Ö–æ–¥ –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º
    'stage_completion': 25,   # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏
    'referral': 50,          # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞
    'achievement': 10        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
}

# –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∏–Ω–∏-–∏–≥—Ä—ã
GAME_REWARD_ALLOWED_GAMES = ["runner", "puzzle"]
GAME_REWARD_COINS_PER_SCORE = {
    "runner": 0.1,  # –∫–∞–∂–¥—ã–µ 10 –æ—á–∫–æ–≤ = 1 –º–æ–Ω–µ—Ç–∞
    "puzzle": 0.2,  # –∫–∞–∂–¥—ã–µ 5 –æ—á–∫–æ–≤ = 1 –º–æ–Ω–µ—Ç–∞
}
GAME_REWARD_MAX_PER_REQUEST = 100

# –õ–∏–º–∏—Ç—ã –Ω–∞–≥—Ä–∞–¥
REWARD_LIMITS = {
    'daily_login': 1,        # –†–∞–∑ –≤ –¥–µ–Ω—å
    'pet_care': 10,          # 10 —Ä–∞–∑ –≤ –¥–µ–Ω—å
    'stage_completion': 1,   # –†–∞–∑ –∑–∞ —Å—Ç–∞–¥–∏—é
    'referral': 10,          # 10 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    'achievement': 1         # –†–∞–∑ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫—É–ø–æ–∫
PURCHASE_OPTIONS = {
    'coins_100': {'coins': 100, 'price_usd': 0.99},
    'coins_500': {'coins': 500, 'price_usd': 3.99},
    'coins_1000': {'coins': 1000, 'price_usd': 6.99},
    'coins_2500': {'coins': 2500, 'price_usd': 14.99},
    'coins_5000': {'coins': 5000, 'price_usd': 24.99}
}

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –†–´–ù–ö–ê/–ê–£–ö–¶–ò–û–ù–û–í =====
# –§–∏—á–µ—Ñ–ª–∞–≥ —Ä—ã–Ω–∫–∞
MARKET_ENABLED = True

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ soft-close
AUCTION_DEFAULT_DURATION_SECONDS = 60 * 60  # 60 –º–∏–Ω—É—Ç
AUCTION_SOFT_CLOSE_SECONDS = 60             # –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏
AUCTION_MIN_BID_INCREMENT_PERCENT = 5       # –Ω–µ –Ω–∏–∂–µ 5% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
AUCTION_MIN_BID_INCREMENT_ABS = 1           # –∏ –Ω–µ –º–µ–Ω—å—à–µ 1 –º–æ–Ω–µ—Ç—ã

# –õ–∏–º–∏—Ç—ã —Ä—ã–Ω–∫–∞
AUCTION_MAX_ACTIVE_PER_USER = 5

# –ö–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–µ—Ç—Ç–æ-–≤—ã–ø–ª–∞—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É; –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è)
MARKET_FEE_PERCENT = 5

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è
AUCTION_LIST_PAGE_SIZE = 20

# Telegram Stars –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_STARS = {
    'enabled': True,
    'star_to_coin_ratio': 1,  # 1 –∑–≤–µ–∑–¥–∞ = 1 –º–æ–Ω–µ—Ç–∞
    'min_stars_for_purchase': 1
}

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò =====
SECRET_KEY = os.getenv("SECRET_KEY", "telepets-secret-key-2024")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./telepets.db")

# ===== –ù–ê–°–¢–†–û–ô–ö–ò API =====
API_HOST = os.getenv("API_HOST", "127.0.0.1")
def _parse_port(default_port: int = 3000) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_PORT —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–ª–∏–∞—Å –≤–∏–¥–∞
    "$PORT" (–∫–∞–∫ –Ω–∞ Render). –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PORT. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã ‚Äî
    –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default_port.
    """
    raw = os.getenv("API_PORT")
    if raw:
        stripped = raw.strip()
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª–∏–∞—Å–∞ –≤–∏–¥–∞ "$PORT"
        if stripped.startswith("$"):
            alias = stripped.lstrip("$")
            alias_val = os.getenv(alias)
            if alias_val and alias_val.isdigit():
                return int(alias_val)
        # –û–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if stripped.isdigit():
            return int(stripped)

    # –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç (Render –∑–∞–¥–∞—ë—Ç PORT)
    platform_port = os.getenv("PORT")
    if platform_port and platform_port.isdigit():
        return int(platform_port)

    return default_port

API_PORT = _parse_port(3000)

# –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î/—Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–¥–ª—è –¥–µ–ø–ª–æ—è)
SKIP_DB_ON_STARTUP = os.getenv("SKIP_DB_ON_STARTUP", "false").strip().lower() in {"1", "true", "yes", "y"}

# –†–∞–∑—Ä–µ—à–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ Alembic –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
RUN_MIGRATIONS_ON_STARTUP = os.getenv("RUN_MIGRATIONS_ON_STARTUP", "false").strip().lower() in {"1", "true", "yes", "y"}

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê =====
MONITORING_UPDATE_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
MONITORING_REQUEST_HISTORY_LIMIT = 1000
MONITORING_RECENT_REQUESTS_LIMIT = 500
MONITORING_AVERAGE_CALCULATION_LIMIT = 100

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ó–ê–î–ê–ß =====
TASK_SLEEP_INTERVAL = 60  # 1 –º–∏–Ω—É—Ç–∞
ACHIEVEMENT_CHECK_INTERVALS = {
    'hour': 3600,      # 1 —á–∞—Å
    'day': 86400,      # 1 –¥–µ–Ω—å
    'perfect_health': 100  # –ò–¥–µ–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
}

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –í–ê–õ–ò–î–ê–¶–ò–ò =====
USER_ID_MAX_LENGTH = 50
USER_ID_MIN_LENGTH = 1
PET_NAME_MAX_LENGTH = 30
PET_NAME_MIN_LENGTH = 1
USER_ID_PATTERN = r'^[0-9a-zA-Z_-]+$'
# –ò–º—è –ø–∏—Ç–æ–º—Ü–∞: —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (–ø–æ –∑–∞–ø—Ä–æ—Å—É), —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã/–¥–µ—Ñ–∏—Å—ã/–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã
# –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤): –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ r'^[A-Za-z]+$'
PET_NAME_PATTERN = r'^[A-Za-z]+$'

# ===== –ù–ê–°–¢–†–û–ô–ö–ò HTTP =====
HTTP_TIMEOUT = 10
HTTP_STATUS_SUCCESS = 200

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –í–ï–†–°–ò–ò =====
APP_VERSION = "1.1.0" 

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (Hugging Face) =====
# –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ `PetsGenerator/` –∏
# –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é. –ù–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–µ–¥—É–µ—Ç
# –¥–æ–±–∞–≤–ª—è—Ç—å —Å—é–¥–∞.

# –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ Hugging Face Inference API
HF_API_TOKEN = os.getenv("HF_API_TOKEN")

# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ Hugging Face
MODELS = {
    "stable-diffusion-xl": {
        "model_id": "stabilityai/stable-diffusion-xl-base-1.0",
        "description": "Stable Diffusion XL - –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
    },
    "flux1-dev": {
        "model_id": "black-forest-labs/FLUX.1-dev",
        "description": "FLUX.1-dev - –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º"
    },
    "flux1-schnell": {
        "model_id": "black-forest-labs/FLUX.1-schnell",
        "description": "FLUX.1-schnell - —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    }
}

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
DEFAULT_SETTINGS = {
    "steps": 30,
    "guidance_scale": 8.5,
    "width": 1024,
    "height": 1024,
    "negative_prompt": (
        "blurry, low quality, watermark, text, logo, extra limbs, cropped, cut off, deformed, "
        "ugly, bad anatomy, disfigured, poorly drawn face, mutated, extra limb, poorly drawn hands, "
        "missing limb, floating limbs, disconnected limbs, malformed hands, blur, out of focus, long neck, "
        "long body, mutated hands and fingers, out of frame, double, two heads, blurred, ugly, disfigured, "
        "too many limbs, deformed, repetitive, black and white, grainy, extra limbs, bad anatomy, high contrast, "
        "overexposed, underexposed, over-saturated, under-saturated, low quality, low quality multiple views, "
        "worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry, "
        "cartoon, anime, illustration, drawing, painting, sketch, 2d, flat, stylized, unrealistic, fantasy art style, digital art style"
    )
}

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
QUALITY_PRESETS = {
    "fast": {"steps": 20, "guidance_scale": 7.0, "width": 512, "height": 512, "description": "–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"},
    "balanced": {"steps": 25, "guidance_scale": 8.0, "width": 768, "height": 768, "description": "–ë–∞–ª–∞–Ω—Å"},
    "high": {"steps": 30, "guidance_scale": 8.5, "width": 1024, "height": 1024, "description": "–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"},
    "ultra": {"steps": 40, "guidance_scale": 9.0, "width": 1024, "height": 1024, "description": "–ú–∞–∫—Å. –∫–∞—á–µ—Å—Ç–≤–æ"}
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∫—ç—à –ø—Ä–æ–µ–∫—Ç–∞)
FILE_SETTINGS = {
    "output_dir": os.path.join("cache", "pet_images"),
    "max_filename_length": 50,
    "safe_filename_chars": r'[<>:"/\\|?*]',
    "replacement_char": "_",
}

# –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
REALISM_PROMPTS = {
    "photorealistic": "photorealistic, hyperrealistic, ultra realistic, detailed skin texture, natural lighting, professional photography, wildlife photography, nature documentary, National Geographic style, detailed fur, detailed scales, detailed feathers, natural environment, realistic anatomy, detailed eyes, detailed features, high resolution, 8k, professional camera, natural colors, realistic shadows, depth of field, bokeh, natural pose, realistic proportions",
    "scientific": "scientific illustration, biological accuracy, anatomical correctness, detailed study, specimen photography, museum quality, scientific documentation, precise details, accurate proportions, realistic textures, natural behavior, environmental context, detailed observation, scientific accuracy, research quality, specimen detail, natural habitat, ecological accuracy",
    "wildlife": "wildlife photography, natural behavior, wild animal, natural habitat, environmental photography, nature documentary, realistic animal behavior, natural lighting, outdoor photography, natural environment, realistic fur texture, realistic scale texture, realistic feather texture, natural pose, realistic proportions, natural colors, realistic shadows, depth of field, natural background, ecological accuracy",
    "portrait": "professional portrait photography, studio lighting, natural skin texture, detailed features, realistic eyes, natural expression, professional camera, high resolution, detailed hair, natural lighting, realistic shadows, depth of field, professional photography, natural colors, realistic proportions, detailed anatomy, natural pose, realistic details",
}

# –°—Ç–∞–¥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å PetState/STAGE_ORDER)
CREATURE_LIFE_STAGES = {
    "egg": {"ru": "—è–π—Ü–æ", "en": "egg"},
    "baby": {"ru": "–¥–µ—Ç—ë–Ω—ã—à", "en": "hatchling"},
    "adult": {"ru": "–≤–∑—Ä–æ—Å–ª–∞—è –æ—Å–æ–±—å", "en": "adult"},
}

STAGE_PROMPT_MODIFIERS = {
    "egg": {
        "ru": "–æ–¥–∏–Ω–æ—á–Ω–æ–µ —è–π—Ü–æ, —É–∑–Ω–∞–≤–∞–µ–º—ã–µ —É–∑–æ—Ä—ã –Ω–∞ —Å–∫–æ—Ä–ª—É–ø–µ, –æ—Ç—Å—ã–ª–∫–∏ –∫ –ø–æ–∫—Ä–æ–≤–∞–º –∏ –æ–∫—Ä–∞—Å–∫–µ –≤–∏–¥–∞, –≥–ª–∞–¥–∫–∞—è/—Ç–µ–∫—Å—Ç—É—Ä–Ω–∞—è —Å–∫–æ—Ä–ª—É–ø–∞, –ª—ë–≥–∫–∏–µ –Ω–∞–º—ë–∫–∏ –Ω–∞ —Ñ–æ—Ä–º—É –±—É–¥—É—â–∏—Ö –ø—Ä–∏–¥–∞—Ç–∫–æ–≤",
        "en": "single egg, recognizable shell patterns, hints of the species' surface and palette, textured shell, subtle motifs of future appendages",
    },
    "baby": {
        "ru": "—É–º–∏–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, –∫—Ä—É–ø–Ω—ã–µ –≥–ª–∞–∑–∞, –±–æ–ª—å—à–∞—è –≥–æ–ª–æ–≤–∞, –º—è–≥–∫–∏–µ —á–µ—Ä—Ç—ã, –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏, –Ω–µ–∂–Ω—ã–µ –ø–æ–∫—Ä–æ–≤—ã",
        "en": "cute proportions, large eyes, bigger head, soft features, short limbs, tender coverings",
    },
    "adult": {
        "ru": "–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤—à–∏–µ—Å—è –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∏–¥–∞, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞—Ç–æ–º–∏—è, –∑—Ä–µ–ª—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
        "en": "fully developed species traits, expressive anatomy, mature abilities",
    },
}

STAGE_NEGATIVE_PROMPTS = {
    "egg": "eyes, pupils, eyelids, face, mouth, beak, teeth, lips, limbs, legs, arms, hands, feet, claws, wings, tail, open egg, cracked shell, broken shell, embryo, fetus, creature visible, animal inside, multiple eggs, nest, characters, text, logo",
    "baby": "adult proportions, muscular, overly defined muscles, scars, battle damage, aggressive posture, fully developed horns, heavy armor, weapons, complex accessories, elderly features, deep wrinkles",
    "adult": "baby-like proportions, chibi, oversized eyes, pacifier, toys, diaper, cute cartoon style, egg shell, nest",
}

API_SETTINGS = {
    "base_url": "https://api-inference.huggingface.co",
    "timeout": 120,
    "default_model": "black-forest-labs/FLUX.1-dev",
}

GENERATION_DEFAULTS = {
    "preferred_model": "flux1-dev",
    "realism_style": "photorealistic",
    "quality_preset": "high",
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
def get_quality_settings(preset: str = "high"):
    return QUALITY_PRESETS.get(preset, QUALITY_PRESETS["high"]).copy()

def get_model_info(model_name: str):
    return MODELS.get(model_name, {}).copy()

def get_all_models():
    return MODELS.copy()

def get_default_settings():
    return DEFAULT_SETTINGS.copy()

def get_file_settings():
    return FILE_SETTINGS.copy()

def get_api_settings():
    return API_SETTINGS.copy()

def get_realism_prompt(style: str = "photorealistic") -> str:
    return REALISM_PROMPTS.get(style, REALISM_PROMPTS["photorealistic"])

def get_all_realism_styles():
    return REALISM_PROMPTS.copy()

def get_generation_defaults():
    return GENERATION_DEFAULTS.copy()

def get_stage_negative_prompt(stage_key: str, include_global: bool = True) -> str:
    base = DEFAULT_SETTINGS.get("negative_prompt", "") if include_global else ""
    stage_np = STAGE_NEGATIVE_PROMPTS.get(stage_key, "")
    if base and stage_np:
        return f"{base}, {stage_np}"
    return stage_np or base

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ê–ù–û–ù–ò–ú–ù–û–°–¢–ò =====

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ANONYMOUS_MODE_ENABLED = True
MIN_DISPLAY_NAME_LENGTH = 2
MAX_DISPLAY_NAME_LENGTH = 20
DEFAULT_ANONYMOUS_MODE = False
ANONYMOUS_NAME_PLACEHOLDER = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫"