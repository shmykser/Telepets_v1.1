#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Telepets.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞.
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import aiohttp
from fastapi import FastAPI
import uvicorn
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_PUBLIC_URL = os.getenv("API_PUBLIC_URL", "http://127.0.0.1:3000")

if not BOT_TOKEN or BOT_TOKEN == "your_bot_token_here":
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    logger.info("üìù –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ù–µ–±–æ–ª—å—à–æ–µ HTTP‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render (healthcheck)
_http_app = FastAPI()

@_http_app.get("/health")
async def _health():
    return {"status": "ok"}

def main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton(text="üêæ –ü–∏—Ç–æ–º—Ü—ã", callback_data="pets")],
        [InlineKeyboardButton(text="üí∞ –ö–æ—à–µ–ª—ë–∫", callback_data="wallet")],
    ])


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(message.from_user.id)
    
    welcome_text = f"""
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telepets!

–í–∞—à ID: <code>{user_id}</code>

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ —á–µ—Ä–µ–∑ API:
<code>curl -X POST "http://127.0.0.1:3000/create?user_id={user_id}&name=–ú–æ–π–ü–∏—Ç–æ–º–µ—Ü"</code>

üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ù–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–∏—Ç–æ–º—Ü–∞
‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥–∞—Ö –º–µ–∂–¥—É —Å—Ç–∞–¥–∏—è–º–∏
‚Ä¢ –°–º–µ—Ä—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞

üéØ –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —Å–æ–∑–¥–∞–≤ –ø–∏—Ç–æ–º—Ü–∞!
    """
    
    await message.answer(welcome_text, parse_mode="HTML", reply_markup=main_keyboard())

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö –ü–æ–º–æ—â—å –ø–æ Telepets:

üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ —á–µ—Ä–µ–∑ API
2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –µ–≥–æ –∑–¥–æ—Ä–æ–≤—å–µ
3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —Å—Ç–∞–¥–∏—è–º–∏

üì± <b>API Endpoints:</b>
‚Ä¢ POST /create - —Å–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞
‚Ä¢ POST /health_up - —É–≤–µ–ª–∏—á–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
‚Ä¢ GET /summary - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ GET /summary/all - –≤—Å–µ –ø–∏—Ç–æ–º—Ü—ã

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ ‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ (‚â§20)
‚Ä¢ üéâ –ü–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞–¥–∏–∏
‚Ä¢ üíÄ –°–º–µ—Ä—Ç—å –ø–∏—Ç–æ–º—Ü–∞

üéØ <b>–°—Ç–∞–¥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è:</b>
‚Ä¢ ü•ö –Ø–π—Ü–æ (10 –º–∏–Ω)
‚Ä¢ üë∂ –î–µ—Ç–µ–Ω—ã—à (10 –º–∏–Ω)
‚Ä¢ üßí –ü–æ–¥—Ä–æ—Å—Ç–æ–∫ (10 –º–∏–Ω)
‚Ä¢ üë® –í–∑—Ä–æ—Å–ª—ã–π (—Ñ–∏–Ω–∞–ª)
    """
    
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = str(message.from_user.id)
    
    status_text = f"""
üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:

üÜî User ID: <code>{user_id}</code>

üîó API URL: {API_PUBLIC_URL}

üì± –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏—Ç–æ–º—Ü–∞:
<code>curl "{API_PUBLIC_URL}/summary?user_id={user_id}"</code>

üìã –î–ª—è –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤:
<code>curl "{API_PUBLIC_URL}/summary/all?user_id={user_id}"</code>
    """
    
    await message.answer(status_text, parse_mode="HTML", reply_markup=main_keyboard())


async def fetch_json(session: aiohttp.ClientSession, url: str, params: dict | None = None):
    try:
        async with session.get(url, params=params, timeout=20) as resp:
            return await resp.json()
    except Exception as e:
        logger.error(f"HTTP error: {e}")
        return None


@dp.callback_query()
async def on_cb(query: CallbackQuery):
    user_id = str(query.from_user.id)
    data = query.data or ""
    async with aiohttp.ClientSession() as session:
        if data == "status":
            url = f"{API_PUBLIC_URL}/summary"
            js = await fetch_json(session, url, params={"user_id": user_id})
            if not js:
                await query.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å.", reply_markup=main_keyboard())
                return
            status = js.get("status")
            total = js.get("total_pets") or js.get("total_pets", 0)
            alive = js.get("alive_pets", 0)
            coins = (js.get("wallet") or {}).get("coins", 0)
            txt = (
                f"üìä <b>–°—Ç–∞—Ç—É—Å</b>: {status}\n"
                f"üêæ –ü–∏—Ç–æ–º—Ü–µ–≤: {total} (–∂–∏–≤—ã—Ö: {alive})\n"
                f"üí∞ –ú–æ–Ω–µ—Ç—ã: {coins}"
            )
            await query.message.edit_text(txt, parse_mode="HTML", reply_markup=main_keyboard())
            await query.answer()
            return
        
        if data == "pets":
            url = f"{API_PUBLIC_URL}/summary/all"
            js = await fetch_json(session, url, params={"user_id": user_id})
            if not js:
                await query.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤.", reply_markup=main_keyboard())
                return
            pets = js.get("pets", [])
            if not pets:
                await query.message.edit_text("ü´• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤.", reply_markup=main_keyboard())
                await query.answer()
                return
            lines = ["üêæ <b>–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã</b>:"]
            for p in pets[:10]:
                lines.append(f"‚Ä¢ {p.get('name')} ‚Äî {p.get('state')} ({p.get('health')}/100)")
            await query.message.edit_text("\n".join(lines), parse_mode="HTML", reply_markup=main_keyboard())
            await query.answer()
            return

        if data == "wallet":
            url = f"{API_PUBLIC_URL}/economy/wallet/{user_id}"
            js = await fetch_json(session, url)
            if not js:
                await query.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫.", reply_markup=main_keyboard())
                return
            coins = js.get("coins", 0)
            total_earned = js.get("total_earned", 0)
            total_spent = js.get("total_spent", 0)
            txt = (
                f"üí∞ <b>–ö–æ—à–µ–ª—ë–∫</b>\n"
                f"–ë–∞–ª–∞–Ω—Å: {coins}\n"
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned}\n"
                f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent}"
            )
            await query.message.edit_text(txt, parse_mode="HTML", reply_markup=main_keyboard())
            await query.answer()
            return
    
    await query.answer()

@dp.message()
async def echo_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telepets!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏."
    )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è Telepets...")
    logger.info(f"ü§ñ –ë–æ—Ç: @{(await bot.me()).username}")
    logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
    logger.info("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ –±–æ—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞")
    
    try:
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ–º –ª—ë–≥–∫–∏–π HTTP‚Äë—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
        port = int(os.getenv("PORT", "3001"))
        http_server = uvicorn.Server(uvicorn.Config(app=_http_app, host="0.0.0.0", port=port, log_level="info"))
        await asyncio.gather(
            dp.start_polling(bot),
            http_server.serve(),
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main()) 